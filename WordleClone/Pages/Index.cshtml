@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<script src="~/js/site.js"></script>


<h2>Wordle</h2>

<div class="wordle-grid">
    @for (int i = 0; i < 5; i++)
    {
        <div class="row">
            @for (int j = 0; j < 5; j++)
            {
                var color = Model.Colors[i].Length > j ? Model.Colors[i][j] : "white";
                var letter = Model.Words[i].Length > j ? Model.Words[i][j] : ' ';
                if (Model.CurrentRow > i && Model.GuessSubmitted != i)
                {
                    <div class="tile" data-state="flipped">
                        <div class="tile-front" style="background-color: @color;">@char.ToUpper(letter)</div>
                        <div class="tile-back" style="background-color:@color;">@char.ToUpper(letter)</div>
                    </div>
                }
                else
                {
                    
                    <div class="tile" data-state="unflipped">
                        <div class="tile-front" style="background-color: white;" >@char.ToUpper(letter)</div>
                        <div class="tile-back" style="background-color: @color;">@char.ToUpper(letter)</div>
                    </div>
                }
            }
        </div>
    }
</div>

@if (Model.GuessSubmitted >= 0)  // Assuming that LastGuessedRowIndex is -1 by default, indicating no guessed row
{
    <script>
        // Call the function to start the animation upon page load for the specified row
        flipTilesSequentially(@Model.GuessSubmitted);
    </script>
}

<form method="post">
    <div class="keyboard">
        @foreach (var key in Model.Keyboard)
        {
            <button class="key" asp-page-handler="AddLetter" asp-route-letter="@key">@key</button>
        }
        <button class="key enter-key" asp-page-handler="SubmitGuess">ENTER</button>
        <button class="key delete-key" asp-page-handler="DeleteLastLetter">&#x2715;</button>
    </div>
</form>


<style>
    .tile {
        position: relative;
        width: 40px;
        height: 40px;
        margin: 2px;
        perspective: 1000px;
        border: 1px solid #000;
        transform-style: preserve-3d;
    }

    .tile-front, .tile-back {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        border: 1px solid #000;
    }

    .tile-front {
        z-index: 2; /* Initially, the front side is on top */
        transform: rotateY(0deg);
    }

    .tile-back {
        z-index: 1; /* Initially, the back side is behind the front */
        transform: rotateY(-180deg); /* Starts flipped */
    }

    .tile[data-state="unflipped"] {
        transform: rotateY(0deg);
        transition: transform 0.7s;
    }

    .tile[data-state="flipped"] {
        transform: rotateY(-180deg); /* Flipped position */
    }

    .keyboard {
        display: grid;
        grid-template-columns: repeat(10, 1fr);
        gap: 5px;
    }

    .key {
        padding: 10px;
        border: none;
        background-color: #eee;
        cursor: pointer;
    }

    .enter-key {
        grid-column: span 2;
    }

    .delete-key {
        grid-column: span 1;
    }
</style>


